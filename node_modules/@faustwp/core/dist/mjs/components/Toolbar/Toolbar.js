var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useEffect, useMemo, useState } from 'react';
import { Edit } from './nodes/Edit.js';
import { GraphiQL } from './nodes/GraphiQL.js';
import { MyAccount } from './nodes/MyAccount.js';
import { hooks } from '../../wpHooks/index.js';
import { ToolbarNode } from './ToolbarNode.js';
import { useAuth } from '../../hooks/useAuth.js';
import { SiteName } from './nodes/SiteName.js';
/**
 * Renders a Toolbar that is based on WordPress' own toolbar.
 */
export function Toolbar({ seedNode }) {
    /**
     * Define Toolbar Nodes that should be included by default.
     */
    const coreToolbarNodes = useMemo(() => {
        return [
            {
                id: 'site-name',
                location: 'primary',
                component: React.createElement(SiteName, null),
            },
            {
                id: 'edit',
                location: 'primary',
                component: React.createElement(Edit, { seedNode: seedNode }),
            },
            {
                id: 'graphiql',
                location: 'primary',
                component: React.createElement(GraphiQL, null),
            },
            {
                id: 'my-account',
                location: 'secondary',
                component: React.createElement(MyAccount, null),
                additionalClassNames: 'with-avatar',
            },
        ];
    }, [seedNode]);
    const [toolbarNodes, setToolbarNodes] = useState(coreToolbarNodes);
    const { isAuthenticated } = useAuth();
    /**
     * Handle Toolbar nodes.
     */
    useEffect(() => {
        if (!isAuthenticated) {
            return;
        }
        const filteredNodes = hooks.applyFilters('toolbarNodes', coreToolbarNodes, {
            seedNode,
        });
        const uniqueIds = new Set(filteredNodes.map((nodes) => nodes.id));
        if (uniqueIds.size < filteredNodes.length) {
            throw new Error('Toolbar Nodes must have unique keys.');
        }
        setToolbarNodes(filteredNodes);
    }, [coreToolbarNodes, seedNode, isAuthenticated]);
    /**
     * Handle adding `admin-bar` body class on render.
     *
     * This could eventually be handled with a Faust bodyClass hook
     * @link https://developer.wordpress.org/reference/hooks/body_class/
     */
    useEffect(() => {
        if (!isAuthenticated) {
            return;
        }
        document === null || document === void 0 ? void 0 : document.body.classList.add('admin-bar');
        // Cleanup body class when this component unmounts.
        // eslint-disable-next-line consistent-return
        return () => {
            document === null || document === void 0 ? void 0 : document.body.classList.remove('admin-bar');
        };
    }, [isAuthenticated]);
    const primaryNodes = toolbarNodes.filter(({ location }) => location === 'primary');
    const secondaryNodes = toolbarNodes.filter(({ location }) => location === 'secondary');
    if (isAuthenticated !== true) {
        return null;
    }
    return (React.createElement("div", { id: "wpadminbar", className: "nojq" },
        React.createElement("div", { id: "wp-toolbar", className: "quicklinks", role: "navigation", "aria-label": "Toolbar" },
            React.createElement("ul", { id: "wp-admin-bar-root-default", className: "ab-top-menu" }, primaryNodes.map((_a) => {
                var { component, id } = _a, props = __rest(_a, ["component", "id"]);
                return (
                // eslint-disable-next-line react/jsx-props-no-spreading
                React.createElement(ToolbarNode, Object.assign({ key: id, id: id }, props), component));
            })),
            React.createElement("ul", { id: "wp-admin-bar-top-secondary", className: "ab-top-secondary ab-top-menu" }, secondaryNodes.map((_a) => {
                var { component, id } = _a, props = __rest(_a, ["component", "id"]);
                return (
                // eslint-disable-next-line react/jsx-props-no-spreading
                React.createElement(ToolbarNode, Object.assign({ key: id, id: id }, props), component));
            })))));
}
